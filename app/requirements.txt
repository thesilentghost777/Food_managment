import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from dotenv import load_dotenv

# Créer l'instance SQLAlchemy ici
db = SQLAlchemy()


def init_database():
    from app import db
    from app.models import Food, Ingredient

    db.drop_all()
    db.create_all()

    plats = []

    # 1. Ndolé
    ndole = Food(
        name="Ndolé",
        description="Plat traditionnel camerounais à base de feuilles de ndolé et d'arachides"
    )
    plats.append((ndole, [
        Ingredient(name="Feuilles de ndolé"),
        Ingredient(name="Arachides", is_allergen=True),
        Ingredient(name="Viande de bœuf"),
        Ingredient(name="Poisson fumé", is_allergen=True),
        Ingredient(name="Crevettes", is_allergen=True)
    ]))

    # 2. Eru
    eru = Food(
        name="Eru",
        description="Soupe traditionnelle à base de feuilles d'eru et de coco râpé"
    )
    plats.append((eru, [
        Ingredient(name="Feuilles d'eru"),
        Ingredient(name="Coco râpé"),
        Ingredient(name="Viande de chèvre"),
        Ingredient(name="Poisson sec", is_allergen=True),
        Ingredient(name="Huile de palme")
    ]))

    # 3. Poulet DG
    poulet_dg = Food(
        name="Poulet DG",
        description="Poulet sauté aux légumes et plantains, plat moderne camerounais"
    )
    plats.append((poulet_dg, [
        Ingredient(name="Poulet"),
        Ingredient(name="Plantains"),
        Ingredient(name="Carottes"),
        Ingredient(name="Haricots verts"),
        Ingredient(name="Ail")
    ]))

    # 4. Koki
    koki = Food(
        name="Koki",
        description="Gâteau de haricots cuit à la vapeur dans des feuilles"
    )
    plats.append((koki, [
        Ingredient(name="Haricots noirs"),
        Ingredient(name="Huile de palme"),
        Ingredient(name="Gingembre"),
        Ingredient(name="Piment"),
        Ingredient(name="Feuilles de bananier")
    ]))

    # 5. Achu
    achu = Food(
        name="Achu",
        description="Plat traditionnel à base de taro pilé et sauce jaune"
    )
    plats.append((achu, [
        Ingredient(name="Taro"),
        Ingredient(name="Huile de palme"),
        Ingredient(name="Épices kankankan"),
        Ingredient(name="Viande de bœuf"),
        Ingredient(name="Poisson fumé", is_allergen=True)
    ]))

    for food, ingredients in plats:
        db.session.add(food)
        db.session.flush()  # pour avoir food.id
        for ing in ingredients:
            ing.food_id = food.id
            db.session.add(ing)

    db.session.commit()
    print("✔ Base de données initialisée avec les plats traditionnels.")

    
def create_app():
    # Charger les variables d'environnement à partir du fichier .env
    load_dotenv()
    app = Flask(__name__)
    
    # Configuration de l'app Flask avec les variables d'environnement
    app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'changeme')
    
    # Initialiser SQLAlchemy avec l'app
    db.init_app(app)
    
    # Importer les modèles APRÈS l'initialisation de db
    from . import models
    
    # Importer et enregistrer les blueprints (routes) APRÈS l'importation des modèles
    from .routes.person_routes import person_bp
    from .routes.food_routes import food_bp
    from .routes.allergy_routes import allergy_bp
    from .routes.ingredient_routes import ingredient_bp
    from .routes.consumption_routes import consumption_bp  # Nouvelle route ajoutée
    
    app.register_blueprint(person_bp, url_prefix="/api/persons")
    app.register_blueprint(food_bp, url_prefix="/api/foods")
    app.register_blueprint(allergy_bp, url_prefix="/api/allergies")
    app.register_blueprint(ingredient_bp, url_prefix="/api/ingredients")
    app.register_blueprint(consumption_bp, url_prefix="/api/consumptions")  # Enregistrement du nouveau blueprint
    
    # Créer les tables si elles n'existent pas encore
    with app.app_context():
        db.create_all()
        init_database()
    
    return app
from app import db
from datetime import datetime

class Person(db.Model):
    __tablename__ = 'person'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    sexe = db.Column(db.String(10), nullable=False)
    allergies = db.relationship('Allergy', back_populates='person', cascade='all, delete-orphan')
    consumptions = db.relationship('Consumption', back_populates='person', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f"<Person {self.name}>"

class Food(db.Model):
    __tablename__ = 'food'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    ingredients = db.relationship('Ingredient', back_populates='food', cascade='all, delete-orphan')
    consumptions = db.relationship('Consumption', back_populates='food', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f"<Food {self.name}>"

class Ingredient(db.Model):
    __tablename__ = 'ingredient'
    id = db.Column(db.Integer, primary_key=True)
    food_id = db.Column(db.Integer, db.ForeignKey('food.id', ondelete='CASCADE'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text)
    is_allergen = db.Column(db.Boolean, default=False)
    food = db.relationship('Food', back_populates='ingredients')
    allergies = db.relationship('Allergy', back_populates='ingredient', cascade='all, delete-orphan')
    
    def __repr__(self):
        return f"<Ingredient {self.name}>"

class Allergy(db.Model):
    __tablename__ = 'allergy'
    id = db.Column(db.Integer, primary_key=True)
    person_id = db.Column(db.Integer, db.ForeignKey('person.id', ondelete='CASCADE'), nullable=False)
    ingredient_id = db.Column(db.Integer, db.ForeignKey('ingredient.id', ondelete='CASCADE'), nullable=False)
    person = db.relationship('Person', back_populates='allergies')
    ingredient = db.relationship('Ingredient', back_populates='allergies')
    __table_args__ = (db.UniqueConstraint('person_id', 'ingredient_id', name='_person_ingredient_uc'),)
    
    def __repr__(self):
        return f"<Allergy Person {self.person_id} - Ingredient {self.ingredient_id}>"

class Consumption(db.Model):
    __tablename__ = 'consumption'
    id = db.Column(db.Integer, primary_key=True)
    person_id = db.Column(db.Integer, db.ForeignKey('person.id', ondelete='CASCADE'), nullable=False)
    food_id = db.Column(db.Integer, db.ForeignKey('food.id', ondelete='CASCADE'), nullable=False)
    consumption_date = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    had_problem = db.Column(db.Boolean, default=False)
    problem_details = db.Column(db.Text)
    severity_level = db.Column(db.String(20))  # 'mild', 'moderate', 'severe'
    symptoms = db.Column(db.Text)
    notes = db.Column(db.Text)
    
    # Relations
    person = db.relationship('Person', back_populates='consumptions')
    food = db.relationship('Food', back_populates='consumptions')
    
    def __repr__(self):
        return f"<Consumption Person {self.person_id} - Food {self.food_id} - Problem: {self.had_problem}>"
#!/bin/bash
path="./"

# Parcours tous les fichiers du répertoire
for file in "$path"/* ; do
    # Vérifie si c'est un fichier régulier
    if [ -f "$file" ]; then
        cat "$file" >> requirements.txt
    fi
done
